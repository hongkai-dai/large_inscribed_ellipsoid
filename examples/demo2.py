"""
This example comes from github user resduo.

It shows how to search the ellipsoid, and then improve upon the first search
result with a second search.
"""
import max_inner_ellipsoid
import numpy as np

if __name__ == "__main__":
    pts = np.array([[2262., 0], [2263, 0], [2264, 0], [2265, 0], [2266, 0],
                    [2267, 0], [2268, 0], [2269, 0], [2270, 0], [2271, 0],
                    [2272, 0], [2273, 0], [2274, 0], [2275, 0], [2276, 0],
                    [2277, 0], [2278, 0], [2279, 0], [2280, 0], [2281, 0],
                    [2282, 0], [2283, 0], [2284, 0], [2285, 0], [2286, 0],
                    [2287, 0], [2288, 0], [2289, 0], [2290, 0], [2291, 0],
                    [2292, 0], [2293, 0], [2294, 0], [2295, 0], [2296, 0],
                    [2297, 0], [2298, 0], [2299, 0], [2300, 0], [2301, 0],
                    [2302, 0], [2303, 0], [2304, 0], [2305, 0], [2306, 0],
                    [2307, 0], [2308, 0], [2309, 0], [2310, 0], [2311, 0],
                    [2312, 0], [2313, 0], [2314, 0], [2315, 0], [2316, 0],
                    [2317, 0], [2318, 0], [2319, 0], [2320, 0], [2321, 0],
                    [2322, 0], [2323, 0], [2324, 0], [2325, 0], [2326, 0],
                    [2327, 0], [2328, 0], [2329, 0], [2330, 0], [2331, 0],
                    [2332, 0], [2333, 0], [2334, 0], [2335, 0], [2336, 0],
                    [2337, 0], [2338, 0], [2339, 0], [2340, 0], [2341, 0],
                    [2342, 0], [2343, 0], [2344, 0], [2345, 0], [2346, 0],
                    [2347, 0], [2348, 0], [2349, 0], [2350, 0], [2351, 0],
                    [2352, 0], [2353, 0], [2354, 0], [2262, 1], [2354, 1],
                    [2262, 2], [2354, 2], [2262, 3], [2354, 3], [2263, 4],
                    [2354, 4], [2263, 5], [2354, 5], [2263, 6], [2354, 6],
                    [2263, 7], [2354, 7], [2264, 8], [2354, 8], [2264, 9],
                    [2354, 9], [2264, 10], [2354, 10], [2265, 11], [2354, 11],
                    [2266, 12], [2354, 12], [2266, 13], [2354, 13], [2267, 14],
                    [2354, 14], [2268, 15], [2354, 15], [2268, 16], [2354, 16],
                    [2269, 17], [2354, 17], [2270, 18], [2354, 18], [2270, 19],
                    [2354, 19], [2271, 20], [2354, 20], [2271, 21], [2354, 21],
                    [2271, 22], [2354, 22], [2272, 23], [2354, 23], [2273, 24],
                    [2354, 24], [2274, 25], [2354, 25], [2274, 26], [2354, 26],
                    [2274, 27], [2354, 27], [2273, 28], [2354, 28], [2273, 29],
                    [2354, 29], [2274, 30], [2354, 30], [2273, 31], [2354, 31],
                    [2274, 32], [2354, 32], [2274, 33], [2354, 33], [2274, 34],
                    [2354, 34], [2275, 35], [2354, 35], [2276, 36], [2354, 36],
                    [2277, 37], [2278, 37], [2354, 37], [2279, 38], [2354, 38],
                    [2280, 39], [2354, 39], [2281, 40], [2354, 40], [2280, 41],
                    [2354, 41], [2280, 42], [2354, 42], [2280, 43], [2354, 43],
                    [2281, 44], [2354, 44], [2281, 45], [2354, 45], [2281, 46],
                    [2354, 46], [2281, 47], [2354, 47], [2281, 48], [2354, 48],
                    [2282, 49], [2354, 49], [2282, 50], [2354, 50], [2282, 51],
                    [2354, 51], [2282, 52], [2354, 52], [2283, 53], [2354, 53],
                    [2283, 54], [2354, 54], [2283, 55], [2354, 55], [2284, 56],
                    [2354, 56], [2284, 57], [2354, 57], [2284, 58], [2354, 58],
                    [2284, 59], [2354, 59], [2285, 60], [2354, 60], [2285, 61],
                    [2354, 61], [2285, 62], [2354, 62], [2285, 63], [2354, 63],
                    [2285, 64], [2354, 64], [2285, 65], [2354, 65], [2286, 66],
                    [2354, 66], [2286, 67], [2354, 67], [2286, 68], [2354, 68],
                    [2286, 69], [2354, 69], [2287, 70], [2354, 70], [2287, 71],
                    [2354, 71], [2287, 72], [2354, 72], [2287, 73], [2354, 73],
                    [2287, 74], [2354, 74], [2287, 75], [2354, 75], [2287, 76],
                    [2354, 76], [2288, 77], [2354, 77], [2288, 78], [2354, 78],
                    [2288, 79], [2354, 79], [2288, 80], [2354, 80], [2289, 81],
                    [2354, 81], [2289, 82], [2354, 82], [2289, 83], [2354, 83],
                    [2289, 84], [2354, 84], [2289, 85], [2338, 85], [2347, 85],
                    [2348, 85], [2349, 85], [2350, 85], [2351, 85], [2352, 85],
                    [2353, 85], [2354, 85], [2289, 86], [2331, 86], [2333, 86],
                    [2334, 86], [2335, 86], [2336, 86], [2337, 86], [2339, 86],
                    [2340, 86], [2341, 86], [2346, 86], [2289, 87], [2329, 87],
                    [2330, 87], [2332, 87], [2342, 87], [2343, 87], [2344, 87],
                    [2345, 87], [2290, 88], [2328, 88], [2290, 89], [2327, 89],
                    [2290, 90], [2322, 90], [2323, 90], [2324, 90], [2325, 90],
                    [2326, 90], [2290, 91], [2321, 91], [2291, 92], [2321, 92],
                    [2291, 93], [2321, 93], [2292, 94], [2320, 94], [2321, 94],
                    [2292, 95], [2319, 95], [2292, 96], [2293, 96], [2318, 96],
                    [2294, 97], [2295, 97], [2318, 97], [2296, 98], [2297, 98],
                    [2318, 98], [2298, 99], [2299, 99], [2317, 99],
                    [2300, 100], [2301, 100], [2317, 100], [2302, 101],
                    [2303, 101], [2316, 101], [2317, 101], [2304, 102],
                    [2305, 102], [2313, 102], [2314, 102], [2315, 102],
                    [2306, 103], [2307, 103], [2312, 103], [2308, 104],
                    [2309, 104], [2310, 104], [2311, 104]])
    max_iterations = 10
    volume_increase_tol = 0.01
    dut = max_inner_ellipsoid.FindLargeEllipsoid(pts)
    P, q, r, outside_pts, inside_pts = \
        dut.search(max_iterations, volume_increase_tol)
    assert (np.all(max_inner_ellipsoid.inside_ellipsoid(inside_pts, P, q, r)))
    assert (not np.any(max_inner_ellipsoid.inside_ellipsoid(
        outside_pts, P, q, r)))
    max_inner_ellipsoid.draw_ellipsoid(P, q, r, pts, inside_pts)
    # Now we want to search again starting from P, q, r of the previous run.
    P_new, q_new, r_new, outside_pts_new, inside_pts_new = dut.search_from(
        P,
        q,
        r,
        outside_pts,
        inside_pts,
        max_iterations=10,
        volume_increase_tol=0.001)
    max_inner_ellipsoid.draw_ellipsoid(P_new, q_new, r_new, outside_pts_new,
                                       inside_pts_new)
